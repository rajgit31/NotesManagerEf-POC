<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NotesDomain.dll" #>

<#@ import namespace="NotesDomain" #>
<#@ import namespace="NotesDomain.Entities" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
//---------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------

using System;
using NotesDomain.Entities;
namespace NotesManagerTransferEntities
{

	<#
		var assembly = Assembly.GetAssembly(typeof(IEntity));

		List<Type> types = assembly.GetTypes().Where(p => !p.IsInterface).ToList();
		var entityTypes =  (from t in types
						where t.IsClass && typeof(IEntity).IsAssignableFrom(t) && t != typeof(BaseEntity)
						select t);

		const string dtoSuffix = "DTO";

		foreach (var t in entityTypes)
		{#>            
	public class <#= t.Name+dtoSuffix #> 
	{<#
		var propertyInfos = t.GetProperties();

		IEnumerable<PropertyInfo> enumerable = propertyInfos.Where(p =>
		{
			var attributes = p.GetCustomAttributes(false);
			return !attributes.Any(a => a is ExcludeTransformationAttribute);
		});

		foreach (var propertyInfo in enumerable)
		{
		    if (propertyInfo.PropertyType.Name == "IList`1" &&
		        propertyInfo.PropertyType.Namespace == "System.Collections.Generic")
		    {
		        foreach (Type interfaceType in propertyInfo.PropertyType.GetInterfaces())
		        {
		            if (interfaceType.IsGenericType)
		            {
		                Type itemType = propertyInfo.PropertyType.GetGenericArguments()[0];
		                #>                    
		public  System.Collections.Generic.List<<#= itemType.Name #>DTO>  <#= propertyInfo.Name #> { get; set; }
	<# break;

		            }
		        }

		    }
			else if (propertyInfo.PropertyType.BaseType != null && propertyInfo.PropertyType.BaseType.FullName == "System.Enum")
            {
                 #>                    
		public  <#= propertyInfo.Name #>DTO  <#= propertyInfo.Name #> { get; set; }
	<#
            }
		    else
		    {
		        #>                    
		public  <#= propertyInfo.PropertyType #>  <#= propertyInfo.Name #> { get; set; }
	<#
		    }
		}
		#>}   
	 <#   
		}

		var enumTypes = (from t in types
						 where t.IsEnum
						 select t).ToList();

		foreach (var enumType in enumTypes)
		{#>            

	public enum <#= enumType.Name #>DTO
	{
	 <#
		MemberInfo[] memberInfos = enumType.GetMembers();
		IEnumerable<MemberInfo> members = memberInfos.Where(x => x.DeclaringType.FullName.Contains("NotesDomain") && !x.Name.Contains("__"));
	foreach (var memberInfo in members)
	 {#>  <#= memberInfo.Name #>,
	<#}#>
	}<#
		}#>    
}      
	
	
	

