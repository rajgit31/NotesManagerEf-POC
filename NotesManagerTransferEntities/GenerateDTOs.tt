<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)bin\Debug\NotesDomain.dll" #>

<#@ import namespace="NotesDomain" #>
<#@ import namespace="NotesDomain.Entities" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//---------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------
<#
    var assembly = Assembly.GetAssembly(typeof(Note));

    List<Type> types = assembly.GetTypes().Where(p => !p.IsInterface).ToList();
    var entityTypes =  from t in types
                    where t.IsClass && t.Namespace == "NotesDomain.Entities"
                    select t;

    const string dtoSuffix = "DTO";

    foreach (var t in entityTypes)
    {#>            
public class <#= t.Name+dtoSuffix #> 
{<#
    var propertyInfos = t.GetProperties();

    IEnumerable<PropertyInfo> enumerable = propertyInfos.Where(p =>
    {
        var attributes = p.GetCustomAttributes(false);
        return !attributes.Any(a => a is ExcludeTransformationAttribute);
    });

    foreach (var propertyInfo in enumerable)
    {
        if (propertyInfo.PropertyType.Name == "IList`1" &&
            propertyInfo.PropertyType.Namespace == "System.Collections.Generic")
        {
                 foreach (Type interfaceType in propertyInfo.PropertyType.GetInterfaces())
                        {
                            if (interfaceType.IsGenericType)
                            {
                                Type itemType = propertyInfo.PropertyType.GetGenericArguments()[0];
                                  #>                    
    public  System.Collections.Generic.List<<#= itemType.Name #>DTO>  <#= propertyInfo.Name #> { get; set; }
<#                        break;
                                
                            }
                        }
          
        }
        else
        {
             #>                    
    public  <#= propertyInfo.PropertyType #>  <#= propertyInfo.Name #> { get; set; }
<#
        }
    }
    #>}   
 <#   
    }
#>